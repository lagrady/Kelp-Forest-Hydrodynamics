import pandas as pd
import numpy as np
import xarray as xr
import matplotlib.pyplot as plt
import matplotlib.colors
import re

def ndbc_to_ds(datapath):
    '''
    Load NDBC Standard meterological data text data file into xarray dataset.
    
    INPUTS:
    data_path: path to series text file generated by nbdc.noaa.gob
    
    RETURNS:
    xarray dataset
    
    EXAMPLE:
    import pandas as pd
    import numpy as np
    import xarray as xr
    
    from buoy_tools import nbdc_to_ds
    datapath = 'nbdc_july.txt' 
    ds = nbdc_to_ds(datapath)
    '''
    # First two lines contain header names and units, respectively
    nhead = 2
    headerlines = list() # Create blank list for header and units

    # Open file and extract relevant variable names and units
    with open(datapath) as f: 
            for i in range(nhead):
                line = f.readline()
                line = line.lstrip('#') # Remove # at beginning of first line
                line = line.rstrip('\n') # Remove \n at end of first line
                line = line.replace('   ', ' ') # Remove wonky spacing and extra commas for clean list
                line = line.replace(' ', ',')
                line = line.replace(',,', ',')
                line = line.replace(',,', ',')
                headerlines.append(line) # Append the headerline list

    # Create list for names and units
    var_names = headerlines[0].split(',')
    var_units = headerlines[1].split(',')

    #Convert textfile to pandas dataframe
    df = pd.read_csv(datapath, skiprows = nhead, names = var_names, delimiter='\s+', index_col = False)

    # String together the seperate date columns into a single cohesive datetime column
    datestr = df['YY'].map(str)+'-'+df['MM'].map(str)+'-'+df['DD'].map(str)
    timestr = df['hh'].map(str)+':'+df['mm'].map(str)
    datetime = pd.to_datetime(datestr+' '+timestr,utc=True)

    #Create descriptions of dataframe variable acronyms for easy identification
    var_desc = ['Wind direction', 'Wind speed', 'Wind gust', 'Significant wave height', 'Dominant wave period', 'Average wave period',
               'Mean wave direction', 'Atmospheric pressure', 'Air temperature', 'Water temperature', 'Dew point', 'Visibility', 'Tidal height']

    #Create the dataset
    ds = xr.Dataset(coords={'time': datetime}) # Creates dataset with only time coordinate
    for i in enumerate(var_names[5:]):

        # Call values from the dataframe corresponding to the current variable name
        vardata = df[str(i[1])].values 

        # Create new variable in xarray dataset corresponding to the variable from the pandas dataframe
        ds[str(i[1])] = ('time', vardata)

        # Missing values are marked with 9's, and are converted to NaN's here
        if ds[str(i[1])].max() == 99:
            ds[str(i[1])] = ds[str(i[1])].where(ds[str(i[1])] < 99)
        elif ds[str(i[1])].max() == 999:
            ds[str(i[1])] = ds[str(i[1])].where(ds[str(i[1])] < 999)
        elif ds[str(i[1])].max() == 9999:
            ds[str(i[1])] = ds[str(i[1])].where(ds[str(i[1])] < 9999)

        # Add units and variable description in the attributes section for each variable
        ds[str(i[1])].attrs['units'] = var_units[i[0]+5] 
        ds[str(i[1])].attrs['description'] = var_desc[i[0]]

    #Manually add ndbc metadata from their data portal
    ds.attrs['Station'] = '46042'
    ds.attrs['Owner'] = 'National Data Buoy Center'
    ds.attrs['URL'] = 'https://www.ndbc.noaa.gov/station_page.php?station=46042'
    ds.attrs['Latitude'] = 36.785
    ds.attrs['Longitude'] = -122.396
    ds.attrs['Air temp height'] = 3.7
    ds.attrs['Anemometer height'] = 4.1
    ds.attrs['Barometer elevation'] = 2.7
    ds.attrs['Sea temp depth'] = -1.5
    ds.attrs['Water depth'] = 1693
    ds.attrs['Sample frequency'] = '10 minutes'

    return ds

def m1_2d_reshape(filepath):
    ds = xr.open_dataset(filepath)
    var_names = list(ds.data_vars)
    df = pd.DataFrame({'time':ds.time, 'z':ds.z}) #, var_names[1]:ds[var_names[1]], var_names[2]:ds[var_names[2]]})
    for i in range(len(var_names)):
        df[var_names[i]] = ds[var_names[i]]
    
    depth = np.unique(df['z'])
    time = np.unique(df['time'])
    
    ds2 = xr.Dataset(coords={'time': time, 'z': depth})
    ds2.time.attrs = ds.time.attrs
    ds2.z.attrs = ds.z.attrs
    
    for var in var_names:
        if var == 'time' or var == 'z':
            pass
        else:
            var_data = df.pivot(index='time',columns='z',values=var)
            ds2[var] = (['time','z'],var_data.values)
            ds2[var].attrs = ds[var].attrs
    
    ds2.attrs = ds.attrs
    return ds2

def m1_1d_reshape(filepath):
    ds = xr.open_dataset(filepath)
    var_names = list(ds.data_vars)
    df = pd.DataFrame({'time':ds.time})
    for i in range(len(var_names)):
        df[var_names[i]] = ds[var_names[i]]
        
    time = np.unique(df['time'])
    
    ds2 = xr.Dataset(coords={'time': df['time'].values})
    ds2.time.attrs = ds.time.attrs
    for var in var_names:
        var_data = df[var]
        ds2[var] = (['time'],var_data)
        ds2[var].attrs = ds[var].attrs
    
    ds2.attrs = ds.attrs
    
    return ds2